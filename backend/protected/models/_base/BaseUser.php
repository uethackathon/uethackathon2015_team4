<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $userid
 * @property string $user
 * @property string $password
 * @property string $first_name
 * @property string $last_name
 * @property integer $date
 * @property string $address
 * @property string $avatar
 * @property string $cover
 * @property string $phone
 * @property string $career
 * @property integer $location_id
 * @property integer $chatting_id
 *
 * @property Comment[] $comments
 * @property Follow[] $follows
 * @property Follow[] $follows1
 * @property Friends[] $friends
 * @property Friends[] $friends1
 * @property Notification[] $notifications
 * @property Post[] $posts
 * @property Post[] $posts1
 * @property Location $location
 * @property Chatting $chatting
 * @property Subject[] $subjects
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'user';
	}

	public function rules() {
		return array(
			array('userid, user, password, first_name, last_name, date, address, avatar, cover, phone, career, location_id, chatting_id', 'required'),
			array('userid, date, location_id, chatting_id', 'numerical', 'integerOnly'=>true),
			array('user, password, first_name, last_name, address, avatar, cover, phone, career', 'length', 'max'=>255),
			array('userid, user, password, first_name, last_name, date, address, avatar, cover, phone, career, location_id, chatting_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'comments' => array(self::HAS_MANY, 'Comment', 'user_comment_id'),
			'follows' => array(self::HAS_MANY, 'Follow', 'user_id_follow'),
			'follows1' => array(self::HAS_MANY, 'Follow', 'user_id_followed'),
			'friends' => array(self::HAS_MANY, 'Friends', 'user_id_1'),
			'friends1' => array(self::HAS_MANY, 'Friends', 'user_id_2'),
			'notifications' => array(self::HAS_MANY, 'Notification', 'user_id'),
			'posts' => array(self::HAS_MANY, 'Post', 'user_id'),
			'posts1' => array(self::MANY_MANY, 'Post', 'post_like(user_id, post_id)'),
			'location' => array(self::BELONGS_TO, 'Location', 'location_id'),
			'chatting' => array(self::BELONGS_TO, 'Chatting', 'chatting_id'),
			'subjects' => array(self::MANY_MANY, 'Subject', 'user_subject(user_id, subject_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'posts1' => 'PostLike',
			'subjects' => 'UserSubject',
		);
	}

	public function attributeLabels() {
		return array(
			'userid' => Yii::t('app', 'Userid'),
			'user' => Yii::t('app', 'User'),
			'password' => Yii::t('app', 'Password'),
			'first_name' => Yii::t('app', 'First Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'date' => Yii::t('app', 'Date'),
			'address' => Yii::t('app', 'Address'),
			'avatar' => Yii::t('app', 'Avatar'),
			'cover' => Yii::t('app', 'Cover'),
			'phone' => Yii::t('app', 'Phone'),
			'career' => Yii::t('app', 'Career'),
			'location_id' => null,
			'chatting_id' => null,
			'comments' => null,
			'follows' => null,
			'follows1' => null,
			'friends' => null,
			'friends1' => null,
			'notifications' => null,
			'posts' => null,
			'posts1' => null,
			'location' => null,
			'chatting' => null,
			'subjects' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('userid', $this->userid);
		$criteria->compare('user', $this->user, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('date', $this->date);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('avatar', $this->avatar, true);
		$criteria->compare('cover', $this->cover, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('career', $this->career, true);
		$criteria->compare('location_id', $this->location_id);
		$criteria->compare('chatting_id', $this->chatting_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}